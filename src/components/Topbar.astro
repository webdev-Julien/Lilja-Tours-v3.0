---
// Navigation.astro
import CTAButton from './CTAButton.astro';

export interface Props {
  frenchUrl?: string;
  currentLang?: 'en' | 'fr';
}

const { frenchUrl = '#', currentLang = 'en' } = Astro.props;
---

<nav class="luxury-nav fixed top-0 left-0 right-0 z-[1000] bg-transparent py-4 transform translate-y-0 transition-all duration-300 ease-in-out">
  <!-- Desktop Navigation -->
  <div class="flex items-center justify-center px-8 max-w-[1500px] mx-auto h-[70px] relative">
    <!-- Logo -->
    <div class="absolute left-8 flex-shrink-0">
      <a href="/" class="block">
        <img src="/logos/topbar-logo.png" alt="Lilja Tours" class="h-15 w-auto brightness-0 invert" />
      </a>
    </div>

    <!-- Navigation Links -->
    <ul class="hidden md:flex gap-10 items-center list-none m-0 p-0">
      <li><a href="#" class="nav-link text-white no-underline font-light text-base lg:text-lg xl:text-xl tracking-wide relative transition-all duration-300 hover:after:w-full">Day tours</a></li>
      <li><a href="#" class="nav-link text-white no-underline font-light text-base lg:text-lg xl:text-xl tracking-wide relative transition-all duration-300 hover:after:w-full">Multiday tours</a></li>
      <li><a href="#" class="nav-link text-white no-underline font-light text-base lg:text-lg xl:text-xl tracking-wide relative transition-all duration-300 hover:after:w-full">Experiences</a></li>
      <li><a href="#" class="nav-link text-white no-underline font-light text-base lg:text-lg xl:text-xl tracking-wide relative transition-all duration-300 hover:after:w-full">Stories</a></li>
      <li><a href="#" class="nav-link text-white no-underline font-light text-base lg:text-lg xl:text-xl tracking-wide relative transition-all duration-300 hover:after:w-full">About</a></li>
      <li><a href="#" class="nav-link text-white no-underline font-light text-base lg:text-lg xl:text-xl tracking-wide relative transition-all duration-300 hover:after:w-full">Contact</a></li>
    </ul>

    <!-- Right Section -->
    <div class="absolute right-8 hidden md:flex items-center gap-6 flex-shrink-0">
      <!-- Language Switcher -->
      <div class="relative">
        {currentLang === 'en' ? (
          <a href={frenchUrl} class="text-white no-underline font-light text-sm lg:text-base px-4 py-2 border border-white/30 rounded-sm transition-all duration-300 h-11 inline-flex items-center justify-center tracking-wide hover:border-white hover:bg-white/10">FR</a>
        ) : (
          <a href="/" class="text-white no-underline font-light text-sm lg:text-base px-4 py-2 border border-white/30 rounded-sm transition-all duration-300 h-11 inline-flex items-center justify-center tracking-wide hover:border-white hover:bg-white/10">EN</a>
        )}
      </div>

      <!-- CTA Button -->
      <CTAButton />
    </div>

    <!-- Mobile Hamburger -->
    <button class="hamburger md:hidden flex flex-col gap-1 bg-none border-none cursor-pointer p-2 absolute right-8" id="hamburger">
      <span class="w-6 h-px bg-white transition-all duration-300"></span>
      <span class="w-6 h-px bg-white transition-all duration-300"></span>
      <span class="w-6 h-px bg-white transition-all duration-300"></span>
    </button>
  </div>

  <!-- Mobile Menu Overlay -->
  <div class="mobile-overlay fixed top-0 left-0 right-0 bottom-0 bg-black/50 backdrop-blur-sm opacity-0 invisible transition-all duration-300 z-[1001]" id="mobileOverlay">
    <div class="mobile-menu absolute top-0 right-0 w-[90vw] h-screen bg-gray-900/95 backdrop-blur-xl border-l border-white/10 transform translate-x-full transition-transform duration-300 flex flex-col items-center justify-center p-8 mx-auto" id="mobileMenu">
      <!-- Close Button -->
      <button class="close-button absolute top-8 right-8 bg-none border-none cursor-pointer w-8 h-8 flex items-center justify-center" id="closeButton">
        <span class="absolute w-5 h-px bg-white transition-all duration-300 rotate-45"></span>
        <span class="absolute w-5 h-px bg-white transition-all duration-300 -rotate-45"></span>
      </button>

      <!-- Mobile Navigation Content -->
      <div class="flex flex-col items-center justify-center w-full text-center gap-8">
        <!-- Mobile Navigation Links -->
        <ul class="flex flex-col gap-6 list-none m-0 p-0 w-full items-center">
          <li class="w-full flex justify-center"><a href="#" class="text-white no-underline font-light text-lg lg:text-xl tracking-wider py-4 border-b border-white/10 transition-all duration-300 w-4/5 text-center hover:text-white/70 hover:scale-105">Day tours</a></li>
          <li class="w-full flex justify-center"><a href="#" class="text-white no-underline font-light text-lg lg:text-xl tracking-wider py-4 border-b border-white/10 transition-all duration-300 w-4/5 text-center hover:text-white/70 hover:scale-105">Multiday tours</a></li>
          <li class="w-full flex justify-center"><a href="#" class="text-white no-underline font-light text-lg lg:text-xl tracking-wider py-4 border-b border-white/10 transition-all duration-300 w-4/5 text-center hover:text-white/70 hover:scale-105">Experiences</a></li>
          <li class="w-full flex justify-center"><a href="#" class="text-white no-underline font-light text-lg lg:text-xl tracking-wider py-4 border-b border-white/10 transition-all duration-300 w-4/5 text-center hover:text-white/70 hover:scale-105">Stories</a></li>
          <li class="w-full flex justify-center"><a href="#" class="text-white no-underline font-light text-lg lg:text-xl tracking-wider py-4 border-b border-white/10 transition-all duration-300 w-4/5 text-center hover:text-white/70 hover:scale-105">About</a></li>
          <li class="w-full flex justify-center"><a href="#" class="text-white no-underline font-light text-lg lg:text-xl tracking-wider py-4 border-b border-white/10 transition-all duration-300 w-4/5 text-center hover:text-white/70 hover:scale-105">Contact</a></li>
        </ul>

        <!-- Mobile Language Switcher -->
        <div class="flex justify-center w-full py-4 border-t border-white/10">
          {currentLang === 'en' ? (
            <a href={frenchUrl} class="text-white no-underline font-light text-base lg:text-lg tracking-wide inline-block py-3 px-6 border border-white/30 rounded-sm transition-all duration-300 hover:border-white hover:bg-white/10">Fran√ßais</a>
          ) : (
            <a href="/" class="text-white no-underline font-light text-base lg:text-lg tracking-wide inline-block py-3 px-6 border border-white/30 rounded-sm transition-all duration-300 hover:border-white hover:bg-white/10">English</a>
          )}
        </div>

        <!-- Mobile CTA Button -->
        <CTAButton variant="mobile" />
      </div>
    </div>
  </div>
</nav>

<style>
  /* Navigation link underline effect */
  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 50%;
    width: 0;
    height: 1px;
    background: white;
    transition: all 0.3s ease;
    transform: translateX(-50%);
  }

  /* Dark background and hidden states for JavaScript control */
  .luxury-nav.nav-dark {
    background: rgba(0, 0, 0, 0.95) !important;
    backdrop-filter: blur(10px);
  }

  .luxury-nav.nav-hidden {
    transform: translateY(-100%) !important;
  }

  /* Mobile overlay and menu active states */
  .mobile-overlay.active {
    opacity: 1 !important;
    visibility: visible !important;
  }

  .mobile-menu.active {
    transform: translateX(0) !important;
  }

  /* Responsive adjustments for mobile menu */
  @media (max-width: 480px) {
    .mobile-menu {
      width: 90vw !important;
      padding: 2rem !important;
      margin-inline: auto;
    }

    .close-button {
      top: 1.5rem !important;
      right: 1.5rem !important;
    }
  }
</style>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', () => {
    const hamburger = document.getElementById('hamburger');
    const mobileOverlay = document.getElementById('mobileOverlay');
    const mobileMenu = document.getElementById('mobileMenu');
    const closeButton = document.getElementById('closeButton');

    const openMenu = () => {
      mobileOverlay?.classList.add('active');
      mobileMenu?.classList.add('active');
      document.body.style.overflow = 'hidden';
    };

    const closeMenu = () => {
      mobileOverlay?.classList.remove('active');
      mobileMenu?.classList.remove('active');
      document.body.style.overflow = '';
    };

    hamburger?.addEventListener('click', openMenu);
    closeButton?.addEventListener('click', closeMenu);
    
    // Close menu when clicking overlay
    mobileOverlay?.addEventListener('click', (e) => {
      if (e.target === mobileOverlay) {
        closeMenu();
      }
    });

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeMenu();
      }
    });

    // Hide/show navigation on scroll and handle dark background
    let lastScrollY = window.scrollY;
    let scrollThreshold = 10; // Minimum scroll distance to trigger hide/show

    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      const nav = document.querySelector('.luxury-nav');
      
      if (!nav) return;
      
      // Check if nav should have dark background based on scroll position
      // Add dark background when scrolled past the initial hero section
      if (currentScrollY > 100) {
        nav.classList.add('nav-dark');
      } else {
        nav.classList.remove('nav-dark');
      }
      
      // Only trigger hide/show after scrolling more than threshold
      if (Math.abs(currentScrollY - lastScrollY) < scrollThreshold) {
        return;
      }
      
      if (currentScrollY > lastScrollY && currentScrollY > 100) {
        // Scrolling down & past 100px - hide nav
        nav.classList.add('nav-hidden');
      } else {
        // Scrolling up - show nav
        nav.classList.remove('nav-hidden');
      }
      
      lastScrollY = currentScrollY;
    };

    // Throttle scroll events for better performance
    let scrollTimeout;
    window.addEventListener('scroll', () => {
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }
      scrollTimeout = setTimeout(handleScroll, 10);
    }, { passive: true });
  });
</script>