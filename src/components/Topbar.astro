---
// Navigation.astro
import CTAButton from './CTAButton.astro';

export interface Props {
  frenchUrl?: string;
  currentLang?: 'en' | 'fr';
}

const { frenchUrl = '#', currentLang = 'en' } = Astro.props;
---

<nav class="luxury-nav">
  <!-- Desktop Navigation -->
  <div class="nav-container">
    <!-- Logo -->
    <div class="logo-section">
      <a href="/" class="logo-link">
        <img src="/logos/topbar-logo.png" alt="Lilja Tours" class="logo" />
      </a>
    </div>

    <!-- Navigation Links -->
    <ul class="nav-links">
      <li><a href="#" class="nav-link">Day tours</a></li>
      <li><a href="#" class="nav-link">Our partners</a></li>
      <li><a href="#" class="nav-link">Blog</a></li>
      <li><a href="#" class="nav-link">About</a></li>
      <li><a href="#" class="nav-link">Contact</a></li>
    </ul>

    <!-- Right Section -->
    <div class="nav-actions">
      <!-- Language Switcher -->
      <div class="language-switcher">
        {currentLang === 'en' ? (
          <a href={frenchUrl} class="lang-link">FR</a>
        ) : (
          <a href="/" class="lang-link">EN</a>
        )}
      </div>
      
      <!-- CTA Button -->
      <CTAButton />
    </div>

    <!-- Mobile Hamburger -->
    <button class="hamburger" id="hamburger">
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
    </button>
  </div>

  <!-- Mobile Menu Overlay -->
  <div class="mobile-overlay" id="mobileOverlay">
    <div class="mobile-menu" id="mobileMenu">
      <!-- Close Button -->
      <button class="close-button" id="closeButton">
        <span class="close-line"></span>
        <span class="close-line"></span>
      </button>
      
      <!-- Mobile Navigation Content -->
      <div class="mobile-content">
        <!-- Mobile Navigation Links -->
        <ul class="mobile-nav-links">
          <li><a href="#" class="mobile-nav-link">Day tours</a></li>
          <li><a href="#" class="mobile-nav-link">Our partners</a></li>
          <li><a href="#" class="mobile-nav-link">Blog</a></li>
          <li><a href="#" class="mobile-nav-link">About</a></li>
          <li><a href="#" class="mobile-nav-link">Contact</a></li>
        </ul>
        
        <!-- Mobile Language Switcher -->
        <div class="mobile-language-switcher">
          {currentLang === 'en' ? (
            <a href={frenchUrl} class="mobile-lang-link">Fran√ßais</a>
          ) : (
            <a href="/" class="mobile-lang-link">English</a>
          )}
        </div>
        
        <!-- Mobile CTA Button -->
        <CTAButton variant="mobile" />
      </div>
    </div>
  </div>
</nav>

<style>
  .luxury-nav {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background: transparent;
    padding-block: 1rem;
    transform: translateY(0);
    transition: all 0.3s ease-in-out;
  }

  .luxury-nav.nav-dark {
    background: rgba(0, 0, 0, 0.95);
    backdrop-filter: blur(10px);
  }

  .luxury-nav.nav-hidden {
    transform: translateY(-100%);
  }

  .nav-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
    height: 70px;
  }

  /* Logo Section */
  .logo-section {
    flex-shrink: 0;
  }

  .logo-link {
    display: block;
  }

  .logo {
    height: 60px;
    width: auto;
    filter: brightness(0) invert(1); /* Makes placeholder white */
  }

  /* Navigation Links */
  .nav-links {
    display: flex;
    gap: 2.5rem;
    align-items: center;
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .nav-links li {
    margin: 0;
  }

  .nav-link {
    color: white;
    text-decoration: none;
    font-weight: 300;
    font-size: clamp(1rem, 2.2vw, 1.3rem);
    letter-spacing: 0.5px;
    position: relative;
    transition: all 0.3s ease;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 50%;
    width: 0;
    height: 1px;
    background: white;
    transition: all 0.3s ease;
    transform: translateX(-50%);
  }

  .nav-link:hover::after {
    width: 100%;
  }

  /* Right Section */
  .nav-actions {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    flex-shrink: 0;
  }

  /* Language Switcher */
  .language-switcher {
    position: relative;
  }

  .lang-link {
    color: white;
    text-decoration: none;
    font-weight: 300;
    font-size: clamp(0.85rem, 1.8vw, 1rem);
    padding: 0.5rem 1rem;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 2px;
    transition: all 0.3s ease;
    letter-spacing: 0.5px;
    height: 2.8rem;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
  }

  .lang-link:hover {
    border-color: white;
    background: rgba(255, 255, 255, 0.1);
  }


  /* Hamburger Menu */
  .hamburger {
    display: none;
    flex-direction: column;
    gap: 4px;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
  }

  .hamburger-line {
    width: 25px;
    height: 1px;
    background: white;
    transition: all 0.3s ease;
  }

  /* Mobile Overlay */
  .mobile-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 1001;
  }

  .mobile-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  /* Mobile Menu */
  .mobile-menu {
    position: absolute;
    top: 0;
    right: 0;
    width: 90dvw;
    height: 100dvh;
    background: rgba(20, 20, 20, 0.95);
    backdrop-filter: blur(20px);
    border-left: 1px solid rgba(255, 255, 255, 0.1);
    transform: translateX(100%);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    margin-inline: auto;
  }

  .mobile-menu.active {
    transform: translateX(0);
  }

  /* Mobile Content Container */
  .mobile-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 100%;
    text-align: center;
    gap: 2rem;
  }

  /* Close Button */
  .close-button {
    position: absolute;
    top: 2rem;
    right: 2rem;
    background: none;
    border: none;
    cursor: pointer;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .close-line {
    position: absolute;
    width: 20px;
    height: 1px;
    background: white;
    transition: all 0.3s ease;
  }

  .close-line:first-child {
    transform: rotate(45deg);
  }

  .close-line:last-child {
    transform: rotate(-45deg);
  }

  /* Mobile Navigation Links */
  .mobile-nav-links {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    list-style: none;
    margin: 0;
    padding: 0;
    width: 100%;
    align-items: center;
  }

  .mobile-nav-links li {
    margin: 0;
    width: 100%;
    display: flex;
    justify-content: center;
  }

  .mobile-nav-link {
    color: white;
    text-decoration: none;
    font-weight: 300;
    font-size: clamp(1.1rem, 3vw, 1.4rem);
    letter-spacing: 1px;
    padding: 1rem 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
    width: 80%;
    text-align: center;
  }

  .mobile-nav-link:hover {
    color: rgba(255, 255, 255, 0.7);
    transform: scale(1.05);
  }

  /* Mobile Language Switcher */
  .mobile-language-switcher {
    display: flex;
    justify-content: center;
    width: 100%;
    padding: 1rem 0;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .mobile-lang-link {
    color: white;
    text-decoration: none;
    font-weight: 300;
    font-size: clamp(0.9rem, 2.5vw, 1.1rem);
    letter-spacing: 0.5px;
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 2px;
    transition: all 0.3s ease;
  }

  .mobile-lang-link:hover {
    border-color: white;
    background: rgba(255, 255, 255, 0.1);
  }


  /* Responsive Design */
  @media (max-width: 768px) {
    .nav-links,
    .nav-actions {
      display: none;
    }

    .hamburger {
      display: flex;
    }

    .nav-container {
      padding: 1rem;
    }
  }

  @media (max-width: 480px) {
    .mobile-menu {
      width: 90dvw;
      padding: 2rem;
      margin-inline: auto;
    }
    
    .close-button {
      top: 1.5rem;
      right: 1.5rem;
    }

    .mobile-nav-link {
      font-size: clamp(1rem, 2.8vw, 1.2rem);
    }

  }
</style>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', () => {
    const hamburger = document.getElementById('hamburger');
    const mobileOverlay = document.getElementById('mobileOverlay');
    const mobileMenu = document.getElementById('mobileMenu');
    const closeButton = document.getElementById('closeButton');

    const openMenu = () => {
      mobileOverlay?.classList.add('active');
      mobileMenu?.classList.add('active');
      document.body.style.overflow = 'hidden';
    };

    const closeMenu = () => {
      mobileOverlay?.classList.remove('active');
      mobileMenu?.classList.remove('active');
      document.body.style.overflow = '';
    };

    hamburger?.addEventListener('click', openMenu);
    closeButton?.addEventListener('click', closeMenu);
    
    // Close menu when clicking overlay
    mobileOverlay?.addEventListener('click', (e) => {
      if (e.target === mobileOverlay) {
        closeMenu();
      }
    });

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeMenu();
      }
    });

    // Hide/show navigation on scroll and handle dark background
    let lastScrollY = window.scrollY;
    let scrollThreshold = 10; // Minimum scroll distance to trigger hide/show

    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      const nav = document.querySelector('.luxury-nav');
      
      if (!nav) return;
      
      // Check if nav should have dark background based on scroll position
      // Add dark background when scrolled past the initial hero section
      if (currentScrollY > 100) {
        nav.classList.add('nav-dark');
      } else {
        nav.classList.remove('nav-dark');
      }
      
      // Only trigger hide/show after scrolling more than threshold
      if (Math.abs(currentScrollY - lastScrollY) < scrollThreshold) {
        return;
      }
      
      if (currentScrollY > lastScrollY && currentScrollY > 100) {
        // Scrolling down & past 100px - hide nav
        nav.classList.add('nav-hidden');
      } else {
        // Scrolling up - show nav
        nav.classList.remove('nav-hidden');
      }
      
      lastScrollY = currentScrollY;
    };

    // Throttle scroll events for better performance
    let scrollTimeout;
    window.addEventListener('scroll', () => {
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }
      scrollTimeout = setTimeout(handleScroll, 10);
    }, { passive: true });
  });
</script>